package gameLogic.util.MiniMax;

import gameLogic.pieces.Piece;
import gameLogic.util.Board;
import gameLogic.util.Move;
import gameLogic.util.Position;

import java.util.Random;
import java.util.Vector;

public class TDMatrixEvaluatorUtil implements BoardEvaluatorUtil
{

    float[] imported = {1.0F,1.0F,1.0F,1.0F,1.0F,1.0F,1.0F,1.0F,6.979237F,9.0732355F,20.552917F,28.611794F,19.466974F,34.158844F,14.231188F,14.050822F,-3.0783124F,0.5335933F,5.429634F,8.316118F,8.95789F,5.854025F,10.838702F,7.0154285F,-5.0160055F,-4.0112066F,0.38918167F,-5.8067474F,-2.1989386F,5.017109F,-3.160646F,3.699026F,-11.737953F,-5.5234547F,-5.131796F,-14.003424F,-7.6790776F,-5.8182235F,-12.091677F,-3.502839F,-16.162725F,-9.52283F,-16.996155F,-13.742061F,-11.826073F,-7.9786773F,-9.873098F,-23.414312F,3.6716325F,9.388218F,-6.9060254F,0.3243959F,6.8289604F,5.4386067F,-2.690701F,-5.4206133F,1.0F,1.0F,1.0F,1.0F,1.0F,1.0F,1.0F,1.0F,6.625987F,-5.282344F,6.497879F,4.9046044F,14.794417F,2.8163414F,9.033062F,-2.1113338F,4.8269286F,10.48076F,16.535765F,13.5641775F,11.562599F,13.495863F,15.32008F,11.44656F,3.290363F,13.9660635F,11.588528F,19.932556F,15.131738F,18.791964F,13.319212F,17.05574F,5.770925F,5.5354633F,13.565177F,13.446226F,5.7834644F,12.341768F,9.7887F,9.4251175F,2.2511315F,-1.7546072F,3.3365288F,2.203715F,10.832033F,1.3756349F,5.712959F,0.935002F,-1.9129199F,1.4245952F,0.29172695F,4.4276824F,6.3056F,-0.53016293F,-0.2227838F,-4.551713F,0.12452276F,2.3744235F,1.6057683F,4.0320234F,-1.4323766F,2.1031427F,1.1861959F,-1.9406351F,3.8537934F,0.6926096F,1.8850597F,-4.2300334F,4.3208985F,0.7084061F,-1.6297295F,2.9856908F,-6.594641F,2.279077F,1.8022712F,-1.3525589F,6.0277786F,-7.088324F,3.1293597F,-9.858288F,-3.679394F,-2.1493874F,2.8868573F,6.8692613F,-0.07625228F,11.951386F,1.8419472F,8.254496F,1.9240776F,1.7922226F,6.5386186F,1.320535F,10.584652F,-1.206299F,6.256021F,2.1061804F,1.4274671F,1.8788779F,-3.6744425F,8.876243F,0.42625493F,5.3711677F,1.7519687F,9.880081F,-1.3590546F,2.164937F,3.8566172F,-1.5761482F,2.963777F,-0.6409141F,0.20711294F,-1.7508808F,-6.4458003F,7.2581787F,-6.5302925F,2.7472181F,0.06510182F,-2.5001507F,-7.52806F,-2.7705958F,2.6232238F,-3.2926397F,-1.4239525F,0.18973668F,-0.59845245F,-5.6728463F,2.563904F,-2.5402987F,-4.0663323F,0.98960006F,6.4740295F,-3.4781382F,-1.0820173F,-0.009330094F,-0.99729836F,-7.142431F,10.773214F,15.583427F,23.072725F,23.955582F,25.516405F,26.659567F,20.154453F,11.7629795F,10.48781F,6.475484F,11.024737F,16.649012F,20.967775F,17.372648F,10.497734F,14.031398F,3.4558756F,8.75346F,10.150528F,14.364425F,13.091484F,9.663139F,10.278828F,8.213545F,1.3617799F,10.112116F,10.967397F,10.919538F,12.808346F,12.849388F,10.263834F,6.685797F,2.3750317F,8.789417F,9.726816F,9.14748F,10.036301F,9.877194F,9.383933F,9.3515415F,5.834455F,5.3866663F,9.0977F,11.098948F,9.347095F,11.678773F,8.4048605F,3.2172709F,0.7053694F,4.188467F,6.2410426F,4.8075175F,9.149687F,11.237469F,7.1464906F,-0.08141203F,4.561953F,1.876712F,4.2010107F,6.047573F,3.256656F,5.7536254F,-0.6791995F,3.4287293F,10.571566F,18.513126F,20.94508F,24.433537F,23.764776F,18.797771F,19.858347F,16.81245F,13.040625F,14.215688F,18.360945F,19.742046F,19.529352F,27.311483F,13.623755F,20.232182F,10.469364F,19.385195F,20.512268F,19.501558F,19.459986F,16.765238F,18.882856F,16.151432F,17.935411F,15.243162F,16.70975F,20.761711F,16.393456F,19.843128F,11.316612F,11.2271805F,11.720852F,10.829642F,17.270216F,13.270202F,17.18217F,15.262906F,8.671897F,8.399724F,7.0313015F,10.823623F,12.920104F,8.639588F,11.648139F,17.030605F,7.444142F,9.368563F,12.055182F,4.0761013F,12.721302F,7.762766F,13.080524F,12.405184F,9.676585F,9.076872F,-1.2931198F,4.652981F,5.7903404F,17.099298F,4.921463F,6.4913955F,1.3758458F,4.6424212F,100.33045F,100.0F,100.0F,101.04925F,100.00367F,99.30148F,99.47363F,100.0F,99.87395F,100.43539F,99.57546F,100.460594F,104.264465F,105.96422F,98.90328F,98.872894F,100.43629F,104.29522F,102.54315F,106.3549F,99.92693F,98.26065F,99.26638F,99.82365F,102.33062F,103.98899F,97.60459F,92.174065F,94.379555F,100.03829F,93.72538F,90.976875F,101.87612F,97.382256F,93.55983F,82.726204F,89.0125F,92.263245F,90.626686F,97.56583F,108.645134F,99.58417F,98.08483F,96.928474F,94.42973F,102.85688F,103.221344F,98.55044F,110.40475F,107.48118F,104.232796F,96.82007F,89.57637F,96.392654F,109.84158F,112.1121F,105.38815F,113.07105F,101.745094F,95.7269F,101.91161F,98.2543F,109.085175F,106.007935F};
    float[] weights = new float[64*6];

    public TDMatrixEvaluatorUtil()
    {
        initWeights();
    }

    public void updateWeights(float[] delta)
    {
        for (int i = 0; i < weights.length; i++) {
            weights[i] += delta[i];
        }
    }

    private void initWeights()
    {
        float[] initWeights = {1,3,3,4,8,100};

        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 64; j++) {
                weights[64*i + j] = initWeights[i];
            }
        }

        weights = imported;
    }

    public float evaluateBoard(Board board)
    {
        Piece[][] pieces = board.getChessBoard();

        float value = 0;

        for (int i = 0; i < pieces.length; i++) {
            for (int j = 0; j < pieces.length; j++) {
                Piece piece = pieces[i][j];
                if(piece == null){continue;}

                value += weights[getWeightIndex(piece)] * getFeatureValue(piece);
            }
        }

        return value;
    }

    public static int getWeightIndex(Piece piece)
    {
        int pieceIndex = (piece.getInt()-1) * 64;
        int row=-1;
        if(piece.getPlayer() == 1)
        {
            row = piece.getPos().getRow();
        }else
        {
            row = 7 - piece.getPos().getRow();
        }
        int positionIndex = row * 8 + piece.getPos().getColumn();
        return pieceIndex + positionIndex;
    }

    public static float getFeatureValue(Piece piece)
    {
        if (piece == null)
        {
            return 0;
        }
        else if(piece.getPlayer() == 1)
        {
            return 1;
        }else
        {
            return -1;
        }

    }


    public String printWeights()
    {
        String output = "";
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 8; j++) {
                for (int k = 0; k < 8; k++) {
                    output += weights[i * 64 + j* 8 + k];
                    if(k!= 7)
                        output += " ";
                }
                output += "\n";
            }
            output += "\n\n";
        }
        return output;
    }

    public String printAverage()
    {
        float[] values = new float[6];
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 8; j++) {
                for (int k = 0; k < 8; k++) {
                    values[i] += weights[64*i + 8*j + k];
                }
            }
            values[i] /= 64;
        }
        return values[0] + ", " + values[1] + ", "+ values[2] + ", " + values[3] + ", " +values[4] + ", " + values[5];
    }
}
