package gameLogic.util.MiniMax;

import gameLogic.pieces.Piece;
import gameLogic.util.Board;
import gameLogic.util.Move;
import gameLogic.util.Position;

import java.util.Random;
import java.util.Vector;

public class TDMatrixEvaluatorUtil implements BoardEvaluatorUtil
{

    float[] imported = {1.0F,1.0F,1.0F,1.0F,1.0F,1.0F,1.0F,1.0F,21.455265F,9.625512F,31.965137F,30.460217F,22.488302F,33.904503F,10.106454F,-12.903519F,-0.121581554F,-2.1989417F,1.5616708F,25.296574F,-1.2382923F,-31.595844F,-8.066525F,-6.3657584F,10.639606F,-15.238231F,8.018632F,-9.515837F,-15.004933F,-18.172365F,-7.241622F,-39.027927F,-28.522665F,-32.106976F,-25.751848F,-18.221518F,-6.2603693F,-22.776783F,-14.205127F,-47.41152F,-37.710373F,-11.961838F,-15.102554F,-19.31517F,-19.97559F,-39.585236F,-40.046047F,-51.10414F,-29.98769F,5.2384715F,24.302057F,11.127359F,-5.514637F,27.745024F,-29.206173F,-2.742569F,1.0F,1.0F,1.0F,1.0F,1.0F,1.0F,1.0F,1.0F,10.299667F,-11.46573F,7.6922975F,9.728901F,29.962547F,-16.424576F,20.217812F,14.478281F,11.029292F,7.7182364F,20.671272F,3.772047F,8.704154F,18.100607F,12.9751835F,13.692863F,-5.284164F,16.558802F,-0.4410931F,35.86036F,5.13568F,-1.1147885F,6.232437F,-6.5096555F,2.0702314F,-2.1718688F,17.344896F,14.070032F,10.436308F,26.236986F,-4.129527F,0.564525F,10.757029F,17.250534F,0.4199115F,-1.3320632F,-17.959242F,14.452846F,-1.9904442F,-12.496535F,2.2524452F,-2.0752277F,-19.276653F,4.3812895F,15.723394F,-4.1441865F,-6.479941F,-12.6989765F,2.825975F,2.5607936F,0.54526097F,-6.613038F,13.128496F,1.588604F,9.623822F,-1.8716438F,5.6949973F,6.6252756F,-9.334189F,3.4952877F,-0.84173155F,-1.5524998F,19.28448F,7.433212F,-14.113758F,7.887939F,4.7486525F,2.8969717F,13.515498F,2.1885164F,2.5279818F,-12.348633F,-13.565379F,4.9664774F,22.29402F,11.935547F,1.484279F,29.809137F,-2.1550791F,-10.486451F,12.315046F,-21.229643F,-6.207395F,5.126666F,15.818285F,2.498631F,-16.02415F,-6.3868685F,8.667755F,12.630689F,-6.8348885F,16.164248F,7.4309607F,7.5431824F,-4.2692137F,-2.0386305F,-7.13489F,-12.032922F,2.0068538F,-12.569588F,1.444551F,1.0356405F,1.4372458F,-13.338926F,6.1280603F,-5.60017F,-20.264477F,-7.9660378F,-0.89555246F,-2.19497F,4.796015F,-13.855068F,-3.4709263F,-10.136139F,-13.027969F,-6.120359F,1.6795428F,6.7627544F,11.722901F,7.719493F,-11.683254F,-7.0165324F,4.500839F,-5.0233493F,-3.7377825F,4.3185825F,2.4483557F,3.4939423F,4.536166F,23.714916F,27.253172F,12.886923F,10.728213F,10.486965F,39.285706F,1.7967613F,8.585301F,10.261102F,13.393513F,16.038986F,27.214458F,7.319704F,8.424471F,11.952619F,17.903322F,13.893282F,17.63788F,0.23212291F,7.628113F,26.800394F,4.3906755F,6.765297F,4.8176336F,15.342409F,-2.9757268F,13.708453F,22.867285F,11.937452F,1.5211765F,10.940769F,10.231867F,1.0047487F,-2.9717503F,1.0049784F,22.390354F,5.0871973F,8.918128F,-4.4357862F,-4.425836F,6.2021995F,8.967413F,15.341169F,-2.047895F,-2.8032405F,-0.36356783F,-11.068117F,-9.665619F,-4.1111493F,-3.804101F,17.8811F,4.5260973F,5.218018F,3.851493F,-19.534288F,10.344332F,0.13234997F,-16.268778F,-3.84489F,17.37952F,19.386301F,-3.7803588F,20.31582F,16.221222F,27.850086F,22.324131F,36.906403F,1.8862473F,33.222473F,11.096896F,18.182007F,5.2281F,7.1284904F,28.321003F,22.677916F,17.09051F,61.09505F,-1.334326F,4.458085F,12.392401F,32.357113F,1.3406358F,16.333632F,17.284325F,0.86490667F,25.453249F,9.82812F,19.88761F,11.238F,21.181812F,38.027027F,11.705482F,23.809006F,28.571108F,21.757402F,13.134434F,24.074339F,7.208349F,22.207796F,13.075339F,23.660248F,28.690416F,17.235622F,23.188118F,11.460595F,29.698536F,14.916998F,21.07321F,3.0829043F,14.663411F,20.481241F,7.852524F,6.759F,16.43766F,17.65945F,15.827745F,21.03484F,10.647258F,3.2494411F,12.616266F,-2.2383382F,10.29907F,16.022263F,16.993553F,11.301894F,5.405031F,6.4480915F,100.0F,100.0F,100.0F,100.0F,100.0F,94.43768F,106.902855F,100.0F,101.86971F,100.0F,100.0F,100.0F,93.890755F,109.30297F,100.471695F,94.47156F,97.68939F,100.0F,94.368286F,103.739815F,103.36217F,100.051254F,100.76414F,100.71934F,98.64158F,101.36656F,98.55666F,102.03891F,112.63003F,99.38501F,82.01693F,96.007256F,99.6939F,83.87736F,99.781334F,98.830795F,111.262825F,82.12095F,89.77408F,93.62704F,103.26521F,92.078224F,102.634346F,97.45254F,97.360214F,93.889404F,107.73064F,100.408264F,101.43794F,96.70376F,103.686F,111.35163F,86.42775F,113.673454F,106.0842F,91.43609F,110.9897F,93.72078F,114.613174F,97.86431F,134.7324F,109.87194F,93.03431F,87.90115F};
    float[] weights = new float[64*6];

    public TDMatrixEvaluatorUtil()
    {
        initWeights();
    }

    public void updateWeights(float[] delta)
    {
        for (int i = 0; i < weights.length; i++) {
            weights[i] += delta[i];
        }
    }

    private void initWeights()
    {
        float[] initWeights = {1,3,3,4,8,100};

        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 64; j++) {
                weights[64*i + j] = initWeights[i];
            }
        }

        weights = imported;
    }

    public float evaluateBoard(Board board)
    {
        Piece[][] pieces = board.getChessBoard();

        float value = 0;

        for (int i = 0; i < pieces.length; i++) {
            for (int j = 0; j < pieces.length; j++) {
                Piece piece = pieces[i][j];
                if(piece == null){continue;}

                value += weights[getWeightIndex(piece)] * getFeatureValue(piece);
            }
        }

        return value;
    }

    public static int getWeightIndex(Piece piece)
    {
        int pieceIndex = (piece.getInt()-1) * 64;
        int row=-1;
        if(piece.getPlayer() == 1)
        {
            row = piece.getPos().getRow();
        }else
        {
            row = 7 - piece.getPos().getRow();
        }
        int positionIndex = row * 8 + piece.getPos().getColumn();
        return pieceIndex + positionIndex;
    }

    public static float getFeatureValue(Piece piece)
    {
        if (piece == null)
        {
            return 0;
        }
        else if(piece.getPlayer() == 1)
        {
            return 1;
        }else
        {
            return -1;
        }

    }


    public String printWeights()
    {
        String output = "";
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 8; j++) {
                for (int k = 0; k < 8; k++) {
                    output += weights[i * 64 + j* 8 + k];
                    if(k!= 7)
                        output += " ";
                }
                output += "\n";
            }
            output += "\n\n";
        }
        return output;
    }

    public String printAverage()
    {
        float[] values = new float[6];
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 8; j++) {
                for (int k = 0; k < 8; k++) {
                    values[i] += weights[64*i + 8*j + k];
                }
            }
            values[i] /= 64;
        }
        return values[0] + ", " + values[1] + ", "+ values[2] + ", " + values[3] + ", " +values[4] + ", " + values[5];
    }
}
